import numpy as np
import matplotlib.pyplot as plt

# Define a DP regression estimator that uses loops for all computations
def dp_reg(dataset, clip_val, eps_val):
    # Manually clip each data point to the interval [-clip_val, clip_val]
    n = len(dataset)
    clipped = []
    for row in dataset:
        clipped_row = []
        for num in row:
            if num < -clip_val:
                clipped_row.append(-clip_val)
            elif num > clip_val:
                clipped_row.append(clip_val)
            else:
                clipped_row.append(num)
        clipped.append(clipped_row)
    
    # Compute S_xy and S_xx using loops
    sum_xy = 0.0
    sum_xx = 0.0
    for i in range(n):
        xi = clipped[i][0]
        yi = clipped[i][1]
        sum_xy += xi * yi
        sum_xx += xi * xi

    # Sensitivities: sum_xy changes by at most 2*clip_val^2, sum_xx by clip_val^2
    # Split the epsilon equally: noise scale = sensitivity / (eps/2)
    noise_scale_xy = 4 * clip_val**2 / eps_val  # 2*clip_val^2 divided by (eps/2)
    noise_scale_xx = 2 * clip_val**2 / eps_val    # clip_val^2 divided by (eps/2)
    
    # Add Laplace noise (using numpy's laplace function)
    noisy_xy = sum_xy + np.random.laplace(0, noise_scale_xy)
    noisy_xx = sum_xx + np.random.laplace(0, noise_scale_xx)
    
    # Prevent division by near-zero
    if abs(noisy_xx) < 1e-6:
        return 0.0
    return noisy_xy / noisy_xx

# Define a non-private OLS estimator using loops
def ols_reg(dataset):
    total_xy = 0.0
    total_xx = 0.0
    for row in dataset:
        total_xy += row[0] * row[1]
        total_xx += row[0] * row[0]
    if total_xx == 0:
        return 0.0
    return total_xy / total_xx

# Simulation parameters
num_trials = 1000          # Trials per sample size
sizes = list(range(100, 5001, 100))  # Sample sizes: 100, 200, ..., 5000
true_beta = 1.0            # The true regression slope
privacy_eps = 0.1          # DP privacy parameter
clip_bound = 1.0           # Clipping bound for x and y

# Lists to store bias and standard deviation for each estimator
ols_biases = []
ols_stds = []
dp_biases = []
dp_stds = []

# Loop over different sample sizes
for sample_size in sizes:
    ols_estimates = []
    dp_estimates = []
    for _ in range(num_trials):
        # Generate synthetic data using for loops
        data_points = []
        for i in range(sample_size):
            # Draw x from Uniform(-0.5, 0.5)
            xi = np.random.uniform(-0.5, 0.5)
            # Generate noise from N(0, sqrt(0.02)) and compute y = x + noise
            noise = np.random.normal(0, np.sqrt(0.02))
            yi = xi + noise
            data_points.append([xi, yi])
        
        # Compute the estimates
        ols_val = ols_reg(data_points)
        dp_val = dp_reg(data_points, clip_bound, privacy_eps)
        ols_estimates.append(ols_val)
        dp_estimates.append(dp_val)
    
    # Calculate mean and standard deviation using explicit loops
    mean_ols = 0.0
    for val in ols_estimates:
        mean_ols += val
    mean_ols /= len(ols_estimates)
    
    mean_dp = 0.0
    for val in dp_estimates:
        mean_dp += val
    mean_dp /= len(dp_estimates)
    
    # Store bias (mean error relative to the true beta)
    ols_biases.append(mean_ols - true_beta)
    dp_biases.append(mean_dp - true_beta)
    
    # Calculate variance for OLS
    var_ols = 0.0
    for val in ols_estimates:
        var_ols += (val - mean_ols)**2
    var_ols /= len(ols_estimates)
    ols_stds.append(var_ols**0.5)
    
    # Calculate variance for DP estimator
    var_dp = 0.0
    for val in dp_estimates:
        var_dp += (val - mean_dp)**2
    var_dp /= len(dp_estimates)
    dp_stds.append(var_dp**0.5)

# Plotting results
plt.figure(figsize=(12, 6))

# Plot Bias vs. Sample Size
plt.subplot(1, 2, 1)
plt.plot(sizes, ols_biases, 'o-', label='OLS Bias')
plt.plot(sizes, dp_biases, 'o-', label='DP Bias')
plt.axhline(0, color='black', linestyle='--')
plt.xlabel('Sample Size (n)')
plt.ylabel('Bias (Mean Error)')
plt.title('Bias vs. Sample Size')
plt.ylim(-1.0, 1.0)
plt.legend()

# Plot Standard Deviation vs. Sample Size
plt.subplot(1, 2, 2)
plt.plot(sizes, ols_stds, 'o-', label='OLS Std')
plt.plot(sizes, dp_stds, 'o-', label='DP Std')
plt.xlabel('Sample Size (n)')
plt.ylabel('Standard Deviation')
plt.title('Standard Deviation vs. Sample Size')
plt.ylim(0, 1.0)
plt.legend()

plt.tight_layout()
plt.show()